---
name: default-bare

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:  # run weekly, every Wednesday 03:00
    - cron: '0 3 * * 3'

permissions: {}

jobs:
  build:
    permissions:
      contents: read
    runs-on: ubuntu-${{ matrix.version }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - distribution: ubuntu
            version: '24.04'
            suite: default
            experimental: true
          - distribution: ubuntu
            version: '22.04'
            suite: default
            experimental: false
          - distribution: ubuntu
            version: '24.04'
            suite: default-nginx
            experimental: true
    env:
      ANSIBLE_CALLBACKS_ENABLED: profile_tasks
      ANSIBLE_EXTRA_VARS: ""
      ANSIBLE_ROLE: noplanman.lufi
      ANSIBLE_SUITE: ${{ matrix.suite }}

    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.ANSIBLE_ROLE }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ansible-lint flake8 yamllint
          which ansible
          pip3 install ansible
          pip3 show ansible
          ls -l $HOME/.local/bin || true
          ansible --version
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE
          [ -f molecule/$ANSIBLE_SUITE/requirements.yml ] && ansible-galaxy install -r molecule/$ANSIBLE_SUITE/requirements.yml
          [ -f get-dependencies.sh ] && sh -x get-dependencies.sh
          { echo '[defaults]'; echo 'callbacks_enabled = profile_tasks, timer'; echo 'roles_path = ../:/home/runner/.ansible/roles'; echo 'ansible_python_interpreter: /usr/bin/python3'; } >> ansible.cfg
      - name: Environment
        run: |
          set -x
          pwd
          env
          find . -ls
      - name: run test
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/converge.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: idempotency run
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/converge.yml ${ANSIBLE_EXTRA_VARS} | tee /tmp/idempotency.log | grep -q 'changed=0.*failed=0'  && (echo 'Idempotence test: pass' && exit 0)  || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 0)
      - name: verify
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/verify.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: On failure
        run: |
          systemctl -l --no-pager status
          systemctl -l --no-pager --failed
          ls -l /usr/bin/ | egrep '(python|pip|ansible)'
          pip freeze
          pip3 freeze
          ip addr
          cat /etc/resolv.conf
          host www.google.com
          ping -c 1 www.google.com || true
          ping -c 1 8.8.8.8 || true
          ps axuw
          netstat -anp
        if: ${{ failure() }}
        continue-on-error: true
      - name: After script - ansible setup
        run: |
          ansible -i inventory --connection=local -m setup localhost
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - systemd
        run: |
          systemctl -l --no-pager status lufi || true
          systemd-analyze --no-pager security || true
          systemd-analyze --no-pager security lufi || true
          systemctl -l --no-pager status nginx || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - network
        run: |
          netstat -anp || true
          ss -nlp || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - config
        run: |
          sudo cat /var/www-lufi/src/lufi.conf
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - curl
        run: |
          set -x
          curl -v http://localhost:8080
          curl -v http://localhost:8080/upload
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - lufi-cli
        run: |
          set -x
          ls
          wget https://framagit.org/fiat-tux/hat-softwares/lufi-cli/uploads/3dc6076d660cc89d7c7850aa5f4e5ed2/lufi-linux-x64
          sha256sum lufi-linux-x64
          chmod 755 lufi-linux-x64
          ./lufi-linux-x64 -u $GITHUB_WORKSPACE/$ANSIBLE_ROLE/README.md -s http://localhost:8080 -v || true
          ./lufi-linux-x64 -u $GITHUB_WORKSPACE/$ANSIBLE_ROLE/README.md -s https://localhost -v || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - logs
        run: |
          cat /var/www-lufi/src/log/production.log || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - nginx logs
        run: |
          set -x
          ls -l /var/log/nginx/
          sudo tail -n100 /var/log/nginx/*log || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - journalctl
        run: |
          set -x
          sudo journalctl -l --no-pager | tail -1000 || true
        if: ${{ always() }}
        continue-on-error: true
